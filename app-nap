#!/usr/bin/python
# Written by omikun
# Patched by Eric Crosson
# 2018-03-03

from datetime import datetime
from time import sleep
import sys
import subprocess
import os
import signal

try:
    from AppKit import NSWorkspace
except ImportError:
    print("Can't import AppKit -- maybe you're running python from brew?")
    print("Try running with Apple's /usr/bin/python instead.")
    exit(1)

def get_pid(name):
    try:
        result = subprocess.check_output(['pgrep '+name], shell=True)
        return result.strip().split('\n')
    except:
        print('''Invalid app name, will not suspend/resume anything
        Will monitor apps in focus, switch to your desired app to see valid name''')
        return None

# if script invoked with an argument, use that as the pid
desiredApp = '0xDEADBEEF'
if len(sys.argv) > 1:
    da = sys.argv[1]
    if da == 'Terminal':
        print("Aborting: will not suspend Terminal")
    else:
        desiredApp = da.capitalize()

pids = get_pid(desiredApp)

if pids:
    print("Monitoring {} PIDs: {}".format(desiredApp, pids))

try:
    last_active_app = None
    stop = True
    while True:
        active_app = NSWorkspace.sharedWorkspace().activeApplication()
        if last_active_app != active_app['NSApplicationName']:
            last_active_app = active_app['NSApplicationName']
            # print("> Current focus: {}".format(last_active_app))
            if last_active_app == desiredApp:
                stop = True
                if pids:
                    print("> Resuming {}...".format(desiredApp))
                    for pid in pids:
                        os.kill(int(pid), signal.SIGCONT)
            elif stop:
                stop = False
                if pids:
                    print("> Stopping {}...".format(desiredApp))
                    for pid in pids:
                        os.kill(int(pid), signal.SIGSTOP)
        sleep(1)
except:
    print("\n> Interrupt-signal recieved")
    if pids:
        print("> Resuming {}".format(desiredApp))
        for pid in pids:
            os.kill(int(pid), signal.SIGCONT)
    print("> Exiting script")
    sys.exit()
